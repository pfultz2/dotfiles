#!/usr/bin/python3

import argparse, subprocess, os, shlex, sys, grp

def show_command(cmd):
    print(shlex.join(cmd), file=sys.stderr)

def run(cmd, *args, **kwargs):
    show_command(cmd)
    return subprocess.run(cmd, *args, **kwargs)

class DockerRunCommandBuilder:
    def __init__(self):
        self.command = ['docker', 'run', '-it']

    def add_arg(self, *args):
        for arg in args:
            self.command.append(arg)

    def add_mount(self, host_path, container_path=None):
        host_path2 = os.path.expanduser(host_path)
        if os.path.exists(host_path2):
            container_path2 = container_path or host_path2
            self.add_arg(f'-v={host_path2}:{container_path2}')

    def add_env_var(self, var, value):
        self.add_arg('-e', f'{var}={value}')

    def propagate_env_vars(self, vars):
        for var in vars:
            if var in os.environ:
                self.add_env_var(var, os.environ[var])

    def add_device(self, device):
        if os.path.exists(device):
            self.add_arg(f'--device={device}')

    def add_group(self, group):
        self.add_arg('--group-add', group)

    def add_cap(self, cap):
        self.add_arg('--cap-add', cap)



def build_docker_command():
    docker_home = '/home/' + os.getlogin()
    cwd = os.getcwd()
    current_histfile = os.environ['CURRENT_HISTFILE']
    command = DockerRunCommandBuilder()
    command.add_mount('/etc/localtime')
    command.add_mount(os.getcwd(), '/data')
    command.add_arg('-w', '/data')
    command.add_env_var('REMOTE_DOCKER_MOUNT', f'/data:{cwd}')
    
    command.propagate_env_vars(['RMATE_PORT', 'SUBLIME_REMOTE_PORT'])
    command.add_mount('~/.ssh', f'{docker_home}/.ssh')
    command.add_mount('~/.ccache', '/ccache')
    command.add_mount('~/onnx', '/onnx')
    command.add_mount(f'{current_histfile}', '/.bash_history')
    command.add_mount(f'{current_histfile}.d', '/.bash_history.d')
    command.add_env_var('HISTFILE', '/.bash_history')


    if os.path.exists('/tmp/.X11-unix/'):
        for d in os.listdir('/tmp/.X11-unix/'):
            command.add_mount(os.path.join('/tmp/.X11-unix/', d))
    command.add_device('/dev/kfd')
    if os.path.exists('/dev/dri'):
        command.add_device('/dev/dri')
        command.add_group('video')
        command.add_group(str(grp.getgrnam('render').gr_gid))
    command.add_arg('--network', 'host')
    command.add_arg('--userns', 'host')

    command.add_cap('SYS_PTRACE')

    return command

def parse_args(args):
    parser = argparse.ArgumentParser("drun")
    parser.add_argument('-e', '--env', action='append')
    parser.add_argument('image')
    parser.add_argument('command', nargs=argparse.REMAINDER)
    return parser.parse_args(args)

if __name__ == "__main__":
    args = parse_args(sys.argv[1:])
    command = build_docker_command()
    for e in args.env:
        x = e.split('=')
        command.add_env_var(x[0], x[1])
    r = run(command.command + [args.image] + args.command).returncode
    exit(r)
