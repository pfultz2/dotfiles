#!/usr/bin/python3

import argparse, shutil, shlex, subprocess, os, sys, socketserver, threading, json
__py_dir__ = os.path.normpath(os.path.join(os.path.realpath(__file__), '..', '..', 'py'))
sys.path.append(__py_dir__)
import remote

DEFAULT_RMATE_PORT=52699
DEFAULT_REMOTE_PORT=52697
SUBLIME_LOCAL_RMATE_PORT=52698

__commands__ = {}
def command(f):
    __commands__[f.__name__] = f
    return f

@command
def pull(args):
    return remote.pull(args)

@command
def push(args):
    return remote.push(args)

def create_connection_handler(hostname):
    class ConnectionHandler(socketserver.StreamRequestHandler):
        def __init__(self, *args, **kwargs):
             self.hostname = hostname
             super(ConnectionHandler, self).__init__(*args, **kwargs)

        def handle(self):
            data = self.rfile.readline().decode("utf-8").strip()
            args = shlex.split(data)
            if args:
                self.writeline(' '.join(args))
                cmd = args[0]
                f = getattr(self, 'command_' + cmd)
                f(args[1:])

        def get_local(self, path):
            if path.startswith('/'):
                return remote.get_local_path(self.hostname, path)
            return path

        def writeline(self, s):
            self.wfile.write(s.encode('utf-8'))
            self.wfile.write("\n".encode('utf-8'))

        def command_open(self, raw_args):
            parser = argparse.ArgumentParser()
            parser.add_argument('file', default=os.getcwd())
            parser.add_argument('--line', '-l', default='0')
            args = parser.parse_args(raw_args)

            f = self.get_local(args.file)
            cmd = [shutil.which('edit')]
            synced = not remote.needs_sync(self.hostname)
            # If it doesnt exists then sync it first
            if not os.path.exists(f):
                synced = True
                remote.pull([f, '-q'], pipe=self.wfile)
            # Create new window if its a directory
            if os.path.isdir(f):
                cmd.append('-n')
            elif not synced:
                # If its a file then sync it before opening
                remote.pull([f, '-q'], pipe=self.wfile)
            cmd.append(f + ':' + args.line)
            self.writeline(' '.join(cmd))
            return subprocess.Popen(cmd, stdout=self.wfile, stderr=self.wfile)

        def get_local_args(self, args):
            return [self.get_local(arg) for arg in args]

        def command_pull(self, args):
            largs = self.get_local_args(args)
            remote.push(largs, pipe=self.wfile)

        def command_push(self, args):
            largs = self.get_local_args(args)
            remote.pull(largs, pipe=self.wfile)

        def command_firefox(self, args):
            largs = self.get_local_args(args)
            cmd = ['open', '-a', 'firefox'] if sys.platform == "darwin" else [shutil.which('firefox')]
            cmd += largs
            self.writeline(shlex.join(cmd))
            return subprocess.Popen(cmd, stdout=self.wfile, stderr=self.wfile)

    return ConnectionHandler

class TCPServer(socketserver.ThreadingTCPServer):
    allow_reuse_address = True

def start_server(host):
    server = TCPServer(('localhost', 0), create_connection_handler(host))
    threading.Thread(target=server.serve_forever, args=[]).start()
    return server

def rempty(l):
    return [x for x in l if x]

def rformat(s, *args, **kwargs):
    for arg in args:
        if not arg:
            return None
    for key, value in kwargs.items():
        if not value:
            return None
    return s.format(*args, **kwargs)

def bash_command(remote_port=None, rmate_port=None, cwd=None):
    cd = []
    if cwd:
        cd = ['cd', cwd, ';']
    return cd + rempty([
        'env',
        rformat('RMATE_PORT={}', rmate_port or DEFAULT_RMATE_PORT),
        rformat('SUBLIME_REMOTE_PORT={}', remote_port), '$SHELL', '-il'
    ])

def shell_wrap(commands):
    return ['sh', '-c', ' '.join(commands)]

def make_command(cmd):
    args = shlex.split(cmd)
    if(not os.path.exists(args[0])):
        args[0] = shutil.which(args[0])
    return args

def connect_et(et, host, no_terminal=False, local_port=None, remote_port=None, rmate_port=DEFAULT_RMATE_PORT, **kwargs):
    ports = rempty([rformat('{}:{}', remote_port, local_port), f'{rmate_port}:{SUBLIME_LOCAL_RMATE_PORT}'])
    print(ports)
    result = make_command(et) + ['-r', ','.join(ports)]
    if no_terminal:
        result.append('--no-terminal')
        result.append('-x')
    else:
        result.append('-c')
        # Add a space so the command is not added to bash history
        result.append(' ' + ' '.join(bash_command(remote_port=remote_port, rmate_port=rmate_port, **kwargs)))
    result.append(host)
    return result

def connect_mosh(mosh, host, **kwargs):
    return make_command(mosh) + ['--', host] + shell_wrap(bash_command(**kwargs))

def connect_ssh(host, local_port=None, remote_port=None, rmate_port=DEFAULT_RMATE_PORT, **kwargs):
    sublime_port_forward = []
    if local_port and remote_port:
        sublime_port_forward = ['-R', f'{remote_port}:localhost:{local_port}']
    return rempty([
        shutil.which('ssh'), '-t',
        *sublime_port_forward,
        '-R', f'{rmate_port}:localhost:{SUBLIME_LOCAL_RMATE_PORT}', host
    ] + bash_command(remote_port=remote_port, rmate_port=rmate_port, **kwargs))


def show_command(cmd):
    print(shlex.join(cmd), file=sys.stderr)

def run(cmd, *args, **kwargs):
    show_command(cmd)
    return subprocess.run(cmd, *args, **kwargs)

def run_async(cmd, *args, **kwargs):
    show_command(cmd)
    return subprocess.Popen(cmd, *args, **kwargs)

def parse_connect_args(args):   
    ap = argparse.ArgumentParser(args)
    path = None
    host = remote.get_remote_host(os.getcwd())
    if host:
        path = remote.get_remote_path(host, os.getcwd())
    ap.add_argument('host', nargs='?', default=host)
    ap.add_argument('--rmate-port', '-m', default=DEFAULT_RMATE_PORT)
    ap.add_argument('--remote-port', '-p', default=DEFAULT_REMOTE_PORT)
    ap.add_argument('--directory', '-d', default=path)
    ap.add_argument('--et', default='et')
    ap.add_argument('--mosh', default='mosh')
    return ap.parse_args(args)

@command
def et(_args):
    args = parse_connect_args(_args)
    server = start_server(args.host)
    print('port', server.server_address[1])
    r = run(connect_et(args.et, args.host, local_port=server.server_address[1], remote_port=args.remote_port, rmate_port=args.rmate_port, cwd=args.directory)).returncode
    server.shutdown()
    return r

@command
def ssh(_args):
    args = parse_connect_args(_args)
    server = start_server(args.host)
    print('port', server.server_address[1])
    r = run(connect_ssh(args.host, local_port=server.server_address[1], remote_port=args.remote_port, rmate_port=args.rmate_port, cwd=args.directory)).returncode
    server.shutdown()
    return r


@command
def mosh(_args):
    args = parse_connect_args(_args)
    server = start_server(args.host)
    etp = run_async(connect_et(args.et, args.host, no_terminal=True, local_port=server.server_address[1], remote_port=args.remote_port, rmate_port=args.rmate_port))
    mosh_cmd = connect_mosh(args.mosh, args.host, rmate_port=args.rmate_port, cwd=args.directory)
    print(' '.join(mosh_cmd))
    cp = run(mosh_cmd)
    server.shutdown()
    etp.kill()
    return cp.returncode

@command
def rssh(_args):
    args = parse_connect_args(_args)
    r = run(connect_ssh(args.host, rmate_port=args.rmate_port)).returncode
    return r

@command
def ret(_args):
    args = parse_connect_args(_args)
    r = run(connect_et(args.et, args.host, rmate_port=args.rmate_port)).returncode
    return r

@command
def rmosh(_args):
    args = parse_connect_args(_args)
    etp = run_async(connect_et(args.et, args.host, no_terminal=True, rmate_port=args.rmate_port))
    mosh_cmd = connect_mosh(args.mosh, args.host, rmate_port=args.rmate_port)
    print(' '.join(mosh_cmd))
    cp = run(mosh_cmd)
    etp.kill()
    return cp.returncode

@command
def mount(args):
    print(json.dumps(remote.get_mounts()))
    return 0

@command
def clangd(args):
    host = remote.get_remote_host(os.getcwd())
    rpath = remote.get_remote_path(host, os.getcwd())
    if host:
        ssh_cmd = shutil.which('ssh')
        # Check for ssh to improve logging when using sublime
        if not ssh_cmd:
            print("ssh command missing", file=sys.stderr)
        path_map = remote.get_path_map(host)
        mappings = ','.join(["{}={}".format(m[0], m[1]) for m in path_map])
        remote_command = ['cd',  rpath, ';'] + args + ['--path-mappings={}'.format(mappings)]
        remote_run = [ssh_cmd, host] + shell_wrap(remote_command)
        return run(remote_run).returncode
    else:
        return run(args).returncode


if __name__ == "__main__":
    cmd = sys.argv[1]
    r = __commands__[cmd](sys.argv[2:])
    exit(r)

