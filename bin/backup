#!/bin/bash
CURRENT_DATE=`date "+%Y-%m-%d-%H_%M_%S"`
SOURCE=$HOME
BACKUP=`hostname -s`
HOST=backup
BWLIMITKBYTES=96000
MAXSIZE=1024m
BACKUP_DIR=`ssh $HOST 'echo $HOME/backup'`
RSYNC_EXCLUDE_FILE="$DOTFILES/etc/rsync/exclude"
set -eu

function backup_list {
    ssh $HOST "ls -1 $BACKUP_DIR/$BACKUP | grep -v trash"
}

if [ "$#" -eq 0 ]; then
    COMMAND='backup'
else
    COMMAND=$1
fi

if [ "$COMMAND" == "backup" ]; then 

    echo "rsync-ignore-vanished-files -avzx --partial --progress --delete --delete-excluded \
    -e ssh \
    --exclude-from=\"$RSYNC_EXCLUDE_FILE\" \
    --link-dest=\"$BACKUP_DIR/$BACKUP/current\" \
    --bwlimit=$BWLIMITKBYTES \
    --max-size=$MAXSIZE \
    --log-file=$SOURCE/.rsync/backuplog \
    \"$SOURCE\" $HOST:$BACKUP_DIR/$BACKUP/incomplete_backup \
    && ssh $HOST \
    \"mv $BACKUP_DIR/$BACKUP/incomplete_backup $BACKUP_DIR/$BACKUP/backup-$CURRENT_DATE \
    && rm -f $BACKUP_DIR/$BACKUP/current \
    && ln -s $BACKUP_DIR/$BACKUP/backup-$CURRENT_DATE $BACKUP_DIR/$BACKUP/current\""

    ssh $HOST \
    "mkdir -p $BACKUP_DIR/$BACKUP/incomplete_backup"

    rsync-ignore-vanished-files -avzx --partial --delete --progress --delete-excluded \
    -e ssh \
    --exclude-from="$RSYNC_EXCLUDE_FILE" \
    --link-dest="$BACKUP_DIR/$BACKUP/current" \
    --bwlimit=$BWLIMITKBYTES \
    --max-size=$MAXSIZE \
    "$SOURCE" $HOST:$BACKUP_DIR/$BACKUP/incomplete_backup \
    && ssh $HOST \
    "mv $BACKUP_DIR/$BACKUP/incomplete_backup $BACKUP_DIR/$BACKUP/backup-$CURRENT_DATE \
    && rm -f $BACKUP_DIR/$BACKUP/current \
    && ln -s $BACKUP_DIR/$BACKUP/backup-$CURRENT_DATE $BACKUP_DIR/$BACKUP/current"
    # --log-file=$SOURCE/.rsync/backuplog \

elif [ "$COMMAND" == "ls" ]; then 
    backup_list
elif [ "$COMMAND" == "find" ]; then 
    if [ "$#" -ne 2 ]; then
        SRC=$(pwd)
    else
        SRC=$(realpath $2)
    fi
    # echo "Searching backup files for: $SRC"
    TOP_DIR=$(dirname $SOURCE)
    DEST=$(echo $SRC | sed -e "s,$TOP_DIR,,")
    # echo "Searching backup files in: $DEST"

    if [ -d "${SRC}" ] ; then
        comm -23 \
        <(ssh $HOST "find $BACKUP_DIR/$BACKUP/backup-*$DEST -maxdepth 1 -print0 | xargs -0 -n1 basename | sort -du --ignore-case") \
        <(ls -1a $SRC | sort -du --ignore-case)
    else
        ssh $HOST "ls -1 $BACKUP_DIR/$BACKUP | xargs -I{} ls -i $BACKUP_DIR/$BACKUP/{}$DEST 2>/dev/null | sort -u -k 1,1 | cut -f 2 -d' '"
    fi
elif [ "$COMMAND" == "clean" ]; then 
    DATE=$((gdate > /dev/null && echo "gdate") || echo "date")
    # Daily backups when older then 2 days
    BACKUPS=$(backup_list | grep -v current | sort -r | tail -n +50 | awk -F'-' '_[$2$3$4]++')
    for DIR in $BACKUPS; do
        echo "Removing daily: $DIR"
        ssh $HOST "mkdir -p $BACKUP_DIR/$BACKUP/trash && mv $BACKUP_DIR/$BACKUP/$DIR $BACKUP_DIR/$BACKUP/trash/"
    done
    # Monthly backups when older then 60 days
    BACKUPS=$(backup_list | grep -v current | sort -r | tail -n +100 | awk -F'-' '_[$2$3]++')
    for DIR in $BACKUPS; do
        echo "Removing monthly: $DIR"
        ssh $HOST "mkdir -p $BACKUP_DIR/$BACKUP/trash && mv $BACKUP_DIR/$BACKUP/$DIR $BACKUP_DIR/$BACKUP/trash/"
    done
elif [ "$COMMAND" == "purge" ]; then 
    ssh $HOST "mkdir -p $BACKUP_DIR/empty"
    echo "rsync -a --progress --delete $BACKUP_DIR/empty/ $BACKUP_DIR/$BACKUP/trash/"
    # ssh $HOST "rsync -a --progress --delete $BACKUP_DIR/empty/ $BACKUP_DIR/$BACKUP/trash/"
elif [ "$COMMAND" == "install" ]; then 
    sudo crontab -u $USER - << EOF
@hourly bash -l -c 'backup &> ~/.backup-log'
@daily bash -l -c 'backup clean &> ~/.backup-clean-log'
@daily bash -l -c 'backup purge'
EOF
else
    echo "Command $COMMAND not found"
fi
