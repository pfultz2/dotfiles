
SCRIPT_DIR=$(dirname ${BASH_SOURCE[0]-$0})
export DOTFILES=$( cd "$SCRIPT_DIR"/../.. && pwd )

export PATH="$HOME/usr/bin:$HOME/.local/bin:$HOME/bin:$HOME/.cargo/bin:$DOTFILES/bin:/usr/local/bin:$PATH"

export CMAKE_PREFIX_PATH="$HOME/usr/"

# OS variables
[ $(uname -s) = "Darwin" ] && export OSX=1 && export UNIX=1
[ $(uname -s) = "Linux" ] && export LINUX=1 && export UNIX=1
uname -s | grep -q "_NT-" && export WINDOWS=1

# Fix systems missing $USER
[ -z "$USER" ] && export USER=$(whoami)

if [ $OSX ]; then
    source $DOTFILES/etc/bash/mac
elif [ $LINUX ]; then
    source $DOTFILES/etc/bash/linux
elif [ $WINDOWS ]; then
    source $DOTFILES/etc/bash/mingw
fi

# Count CPUs for Make jobs
if [ $OSX ]
then
  export CPUCOUNT=$(sysctl -n hw.ncpu)
elif [ $LINUX ]
then
  export CPUCOUNT=$(nproc)
else
  export CPUCOUNT="1"
fi

# colored GCC warnings and errors
export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

if [[ "$BASH_VERSION" ]]; then
    # pip bash completion start
    _pip_completion()
    {
        COMPREPLY=( $( COMP_WORDS="${COMP_WORDS[*]}" \
                       COMP_CWORD=$COMP_CWORD \
                       PIP_AUTO_COMPLETE=1 $1 ) )
    }
    complete -o default -F _pip_completion pip
    # pip bash completion end
fi

alias cpm='cget -p ~/usr'

# TODO: Make this a script
alias fig='docker-compose -f fig.yml'

# alias vg='valgrind --track-origins=yes --read-var-info=yes --expensive-definedness-checks=yes --read-inline-info=yes'
alias vg='valgrind --track-origins=yes --read-var-info=yes --read-inline-info=yes'

alias m="CTEST_PARALLEL_LEVEL=${CPUCOUNT} make -j${CPUCOUNT}"

# Pretty print the path
alias path='echo $PATH | tr -s ":" "\n"'

# URL-encode strings
alias urlencode='python -c "import sys, urllib as ul; print ul.quote_plus(sys.argv[1]);"'

alias a='cppcheck-all'

alias tm='tmux att || tmux'
alias rr='remote-run.sh'
alias cmake-ccache='cmake -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_C_COMPILER_LAUNCHER=ccache'
alias ssh-subl='ssh -R 52698:localhost:52698'
alias et-subl='et -r 52698:52698'

function mosh-subl {
    # stty -tostop
    trap 'kill $BGPID; exit' INT
    et -r 52698:52698 "$@" &!
    BGPID=$!
    mosh "$@"
    kill $BGPID
}

alias vr='venv-run'

if type -p lsd > /dev/null ; then
    alias ls='lsd'
fi

# Persistent bash history for screen/tmux sessions
if [[ $TERM == screen* ]]; then
   mkdir -p $HISTFILE.d/
   if [ -n "$TMUX" ]; then
      declare SCREEN_NAME=$(tmux display-message -p '#S')
      declare WINDOW=$(tmux display-message -p '#I')
    else
      declare SCREEN_NAME=$(echo $STY | sed -nr 's/[^.]*\.(.*)/\1/p')
   fi
   if [[ $SCREEN_NAME ]]; then
       HISTFILE="${HISTFILE}.d/${SCREEN_NAME}.${WINDOW}"
       declare -p HISTFILE
   fi
   # Persistent cwd
   PWD_FILE="$HISTFILE.pwd"
   [ -s $PWD_FILE ] && cd `cat $PWD_FILE`
   PROMPT_COMMAND="pwd > $PWD_FILE;$PROMPT_COMMAND"
# Persistent bash history for vscode sessions
elif [[ $TERM_PROGRAM == vscode ]]; then
    mkdir -p $HISTFILE.d/
    HISTFILE="${HISTFILE}.d/$(basename $(pwd)).vscode"
fi
touch $HISTFILE
if type -p mcfly > /dev/null ; then
    if [[ "$BASH_VERSION" ]]; then
        eval "$(mcfly init bash)"
    fi
    if [[ "$ZSH_VERSION" ]]; then
        eval "$(mcfly init zsh)"
    fi
elif type -p hstr > /dev/null ; then
    eval "$(hstr --show-configuration)"
else
    if [[ "$BASH_VERSION" ]]; then
        shopt -s histappend
    fi
    if [[ "$ZSH_VERSION" ]]; then
        setopt APPEND_HISTORY
    fi
    PROMPT_COMMAND="history -a;$PROMPT_COMMAND"
fi
export CURRENT_HISTFILE=$HISTFILE

if [ -n "$TMUX" ]; then
    function refresh_env {
        eval "$(tmux showenv -s)"
    }
else
    function refresh_env {
        echo
    }
fi

if [[ $TERM_PROGRAM == vscode ]];
then
    export EDITOR='code -w'
    export EDITOR_FILE="code"
    export EDITOR_DIR="code -n"
elif type -p timeout > /dev/null && timeout 1 bash -c "</dev/tcp/localhost/52698 &>/dev/null" &> /dev/null
then
    export EDITOR=rsubl
    export EDITOR_FILE=rsubl
    export EDITOR_DIR=ls
elif type -p subl > /dev/null && [[ ! -z "$DISPLAY" ]] ; then
    export EDITOR='subl -w'
    export EDITOR_FILE="subl"
    export EDITOR_DIR="subl -n"
elif type -p nano > /dev/null ; then
    export EDITOR=nano
    export EDITOR_FILE=nano
    export EDITOR_DIR=ls
fi

# Always use nano for crontab
alias crontab='EDITOR=nano crontab'

function e {
    if [ "$1" = "" ] ; then
        $EDITOR_DIR .
    elif [ -d "$1" ] ; then
        $EDITOR_DIR "$1"
    else
        $EDITOR_FILE "$1"
    fi
}

if [[ "$BASH_VERSION" ]]; then
    for i in $DOTFILES/etc/bash/completions/*; do
        if [ -f $i ]; then
            . $i
        fi
    done
fi

source $DOTFILES/etc/bash/colors
source $DOTFILES/etc/bash/functions

[[ $- == *i* ]] && source $DOTFILES/etc/bash/prompt
[[ $- == *i* ]] && PS1="$PROMPT_BEGIN$BIGreen$PROMPT_END$PROMPT_HOST:$PROMPT_USER$PROMPT_BEGIN$Green${PROMPT_END}[$PROMPT_TIME]$PROMPT_NEW_LINE$PROMPT_BEGIN$Blue$PROMPT_END$PROMPT_CURRENT_WORKING_DIR $PROMPT_BEGIN$Yellow$PROMPT_END$PROMPT_BRANCH$PROMPT_BEGIN$Color_Off$PROMPT_END$ "
[[ $- == *i* ]] && PS2='$PROMPT_BEGIN\033[01;36m$PROMPT_END>'
[[ $- == *i* ]] && PROMPT_COMMAND+=refresh_env
[[ $- == *i* ]] && precmd_functions=(refresh_env)

if [[ "$BASH_VERSION" ]]; then
  export ITERM_ENABLE_SHELL_INTEGRATION_WITH_TMUX=yes
  source $DOTFILES/etc/bash/iterm2.bash
fi

if [[ "$ZSH_VERSION" ]]; then
  export ITERM_ENABLE_SHELL_INTEGRATION_WITH_TMUX=yes
  source $DOTFILES/etc/bash/iterm2.zsh
fi
